{"compress":true,"commitItems":[["d9c4731e-d1b1-4c74-bee8-d890500a74d5",1521136383917,"[TOC]\n\n### **函数分类**\n\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmpsqfbymtj30k50ddqau.jpg)\n\n### **HIVE CLI命令**\n\n显示当前会话有多少函数可用 \n`SHOW FUNCTIONS;`\n\n显示函数的描述信息 \n`DESC FUNCTION concat;`\n\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmpstosj46j30ee027dft.jpg)\n\n显示函数的扩展描述信息 \n`DESC FUNCTION EXTENDED concat;`\n\n### **简单函数**\n\n**函数的计算粒度为单条记录。** \n关系运算 \n数学运算 \n逻辑运算 \n数值计算 \n类型转换 \n日期函数 \n条件函数 \n字符串函数 \n统计函数\n\n### **聚合函数**\n\n函数处理的数据粒度为多条记录。 \nsum()—求和 \ncount()—求数据量 \navg()—求平均直 \ndistinct—求不同值数 \nmin—求最小值 \nmax—求最人值\n\n### **集合函数**\n\n复合类型构建 \n复杂类型访问 \n复杂类型长度\n\n### **特殊函数**\n\n#### **窗口函数**\n\n**应用场景** \n用于分区排序 \n动态Group By \nTop N \n累计计算 \n层次查询\n\n**Windowing functions**\n\n```\nlead\nlag\nFIRST_VALUE\nLAST_VALUE\n```\n\n#### **分析函数**\n\n**Analytics functions**\n\n```\nRANK\nROW_NUMBER\nDENSE_RANK\nCUME_DIST\nPERCENT_RANK\nNTILE\n```\n\n#### **混合函数**\n\n```\njava_method(class,method [,arg1 [,arg2])reflect(class,method [,arg1 [,arg2..]])hash(a1 [,a2...])\n```\n\n#### **UDTF**\n\n```\nlateralView: LATERAL VIEW udtf(expression) tableAlias AS columnAlias (‘,‘ columnAlias)*  fromClause: FROM baseTable (lateralView)*  \n```\n\nateral view用于和split,explode等UDTF一起使用，它能够将一行数据拆成多行数据，在此基础上可以对拆分后的数据进行聚合。lateral view首先为原始表的每行调用UDTF，UTDF会把一行拆分成一或者多行，lateral view再把结果组合，产生一个支持别名表的虚拟表。\n\n### **常用函数Demo**：\n\n```\ncreate table employee( \nid string, \nmoney double, \ntype string)row format delimited \nfields terminated by '\\t' \nlines terminated by '\\n' \nstored as textfile; \n\nload data local inpath ‘/liguodong/hive/data‘ into table employee;select * from employee;\n```\n\n```\n优先级依次为NOT AND OR\nselect id,money from employee where (id=‘1001‘ or id=‘1002‘) and money=‘100‘;\n```\n\n**cast类型转换**\n\n```\nselect cast(1.5 as int);\n```\n\n**if****判断**\n\n```\nif(con,‘‘,‘‘);\n```\n\n```\nhive (default)> select if(2>1,‘YES‘,‘NO‘);\n\nYES\n```\n\n```\ncase when con then ‘‘ when con then ‘‘ else  ‘‘ end (‘‘里面类型要一样)\n\nselect case when id=‘1001‘ then ‘v1001‘ when id=‘1002‘ then ‘v1002‘ else ‘v1003‘ end from employee;\n```\n\n\nget_json_object\n\n```\nget_json_object(json 解析函数，用来处理json，必须是json格式)select get_json_object(‘{\"name\":\"jack\",\"age\":\"20\"}‘,‘$.name‘);\n```\n\n**URL****解析函数**\n\n```\nparse_url(string urlString, string partToExtract [, string keyToExtract])\n\nselect parse_url(‘http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1‘, ‘HOST‘) from employee limit 1;\n```\n\n**字符串连接函数： concat** \n语法: concat(string A, string B…) \n返回值: string \n说明：返回输入字符串连接后的结果，支持任意个输入字符串 \n**举例：**\n\n```\nhive> select concat(‘abc‘,‘def’,‘gh‘) from lxw_dual;\n```\n\n**带分隔符字符串连接函数： concat_ws** \n语法: concat_ws(string SEP, string A, string B…) \n返回值: string \n说明：返回输入字符串连接后的结果， SEP 表示各个字符串间的分隔符\n\n```\nconcat_ws(string SEP, array<string>)\n\n举例：\nhive> select concat_ws(‘,‘,‘abc‘,‘def‘,‘gh‘) from lxw_dual;\nabc,def,gh\n```\n\n列出该字段所有不重复的值，相当于去重\n```\ncollect_set(id)  //返回的是数组\n\n列出该字段所有的值，列出来不去重 \n\ncollect_list(id)   //返回的是数组\nselect collect_set(id) from taborder;\n```\n\n求和\n\n```\nsum(money)\n```\n统计列数\n```\ncount(*)\n\nselect sum(num),count(*) from taborder;\n```\n\n**窗口函数**\n\n```\nfirst_value(第一行值)\n\nfirst_value(money) over (partition by id order by money)\nselect ch,num,first_value(num) over (partition by ch order by num) from taborder;\n\n```\nlast_value 最后一行值\n\n```\nhive (liguodong)> select ch,num,last_value(num) over (partition by ch) from taborder;\n```\n\nlead\n\n```\n 去当前行后面的第二行的值\n lead(money,2) over (order by money)\n```\nlag \n\n```\n 去当前行前面的第二行的值\n lag(money,2) over (order by money)\n```\n\n**rank排名**\n\n```\nrank() over(partition by id order by money)\n\nselect ch, num, rank() over(partition by ch order by num) as rank from taborder;\n\nselect ch, num, dense_rank() over(partition by ch order by num) as dense_rank from taborder;\n```\n\n\n**cume_dist**\n\n```\ncume_dist (相同值的最大行号/行数)\n\ncume_dist() over (partition by id order by money)\n\n\npercent_rank (相同值的最小行号-1)/(行数-1)\n\n第一个总是从0开始\npercent_rank() over (partition by id order by money)\n\n select ch,num,cume_dist() over (partition by ch order by num) as cume_dist,\n percent_rank() over (partition by ch order by num) as percent_rank from taborder;\n```\nntile分片 \n```\n ntile(2) over (order by money desc)  分两份 \n\n select ch,num,ntile(2) over (order by num desc) from taborder;\n```\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmpv0piwyej30qm07edg8.jpg)\n\n**混合函数**\n\n```\nselect id,java_method(\"java.lang,Math\",\"sqrt\",cast(id as double)) as sqrt from hiveTest;\n```\n\n**UDTF**\n\n```\n select id,adid \n from employee \n lateral view explode(split(type,‘B‘)) tt as adid;\n\n explode 把一列转成多行\n```\n\n```\nhive (liguodong)>  select id,adid\n                >  from hiveDemo\n                >  lateral view explode(split(str,‘,‘)) tt as adid;\n```\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmpv0piwyej30qm07edg8.jpg)\n\n**正则表达式** \n使用正则表达式的函数 \n`regexp_replace(string subject A,string B,string C)` \n`regexp_extract(string subject,string pattern,int index)`\n\n```\nhive> select regexp_replace(‘foobar‘, ‘oo|ar‘, ‘‘) from lxw_dual;\n\noutput>>fb\n\n\nhive> select regexp_replace(‘979|7.10.80|8684‘, ‘.*\\\\|(.*)‘,1) from hiveDemo limit 1;\n```\n",[[1521136325561,["wanghuan@DESKTOP-VT81TGT",[[-1,0,"[TOC]"],[1,5,"---\ntitle: HIVE sql\ndate: 2018/3/15 20:46:25\ncategory:\n- 大数据\n- HIVE\ntag:\n- HIVE\ncomments: true  \n---"]],[0,0],[100,100]]],[1521136345648,["wanghuan@DESKTOP-VT81TGT",[[1,19,"函数参考"]],[19,19],[23,23]]]]]]}