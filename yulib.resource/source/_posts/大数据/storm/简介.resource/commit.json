{"compress":true,"commitItems":[["bf9b9331-6876-4f6d-b898-6aefb10d3fc6",1521136655612,"[TOC]\n\n# 1. 简介\n\nApache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架 \n\n### 什么是Apache Storm？\n\nApache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。虽然Storm是无状态的，它通过Apache ZooKeeper管理分布式环境和集群状态。它很简单，您可以并行地对实时数据执行各种操作。\n\nApache Storm继续成为实时数据分析的领导者。Storm易于设置和操作，并且它保证每个消息将通过拓扑至少处理一次。\n\n### Apache Storm vs Hadoop\n\n基本上Hadoop和Storm框架用于分析大数据。两者互补，在某些方面有所不同。Apache Storm执行除持久性之外的所有操作，而Hadoop在所有方面都很好，但滞后于实时计算。下表比较了Storm和Hadoop的属性。\n\n| Storm                                    | Hadoop                                   |\n| ---------------------------------------- | ---------------------------------------- |\n| 实时流处理                                    | 批量处理                                     |\n| 无状态                                      | 有状态                                      |\n| 主/从架构与基于**ZooKeeper**的协调。主节点称为nimbus，从属节点是**主管**。 | 具有/不具有基于ZooKeeper的协调的主 - 从结构。主节点是**作业跟踪器**，从节点是**任务跟踪器**。 |\n| Storm流过程在集群上每秒可以访问数万条消息。                 | Hadoop分布式文件系统（HDFS）使用MapReduce框架来处理大量的数据，需要几分钟或几小时。 |\n| Storm拓扑运行直到用户关闭或意外的不可恢复故障。               | MapReduce作业按顺序执行并最终完成。                   |\n| **两者都是分布式和容错的**                          |                                          |\n| 如果nimbus / supervisor死机，重新启动使它从它停止的地方继续，因此没有什么受到影响。 | 如果JobTracker死机，所有正在运行的作业都会丢失。            |\n\n### Apache Storm优势\n\n下面是Apache Storm提供的好处列表：\n\n- Storm是开源的，强大的，用户友好的。它可以用于小公司和大公司。\n- Storm是容错的，灵活的，可靠的，并且支持任何编程语言。\n- 允许实时流处理。\n- Storm是令人难以置信的快，因为它具有巨大的处理数据的力量。\n- Storm可以通过线性增加资源来保持性能，即使在负载增加的情况下。它是高度可扩展的。\n- Storm在几秒钟或几分钟内执行数据刷新和端到端传送响应取决于问题。它具有非常低的延迟。\n- Storm有操作智能。\n- Storm提供保证的数据处理，即使群集中的任何连接的节点死或消息丢失。\n\n# 2. Apache Storm核心概念\n\nApache Storm从一端读取实时数据的原始流，并将其传递通过一系列小处理单元，并在另一端输出处理/有用的信息。\n\n下图描述了Apache Storm的核心概念。\n\n![核心理念](https://www.w3cschool.cn/attachments/tuploads/apache_storm/core_concept.jpg)\n\n| 组件     | 描述                                       |\n| ------ | ---------------------------------------- |\n| Tuple  | Tuple是Storm中的主要数据结构。它是有序元素的列表。默认情况下，Tuple支持所有数据类型。通常，它被建模为一组逗号分隔的值，并传递到Storm集群。 |\n| Stream | 流是元组的无序序列。                               |\n| Spouts | 流的源。通常，Storm从原始数据源（如Twitter Streaming API，Apache Kafka队列，Kestrel队列等）接受输入数据。否则，您可以编写spouts以从数据源读取数据。“ISpout”是实现spouts的核心接口，一些特定的接口是IRichSpout，BaseRichSpout，KafkaSpout等。 |\n| Bolts  | Bolts是逻辑处理单元。Spouts将数据传递到Bolts和Bolts过程，并产生新的输出流。Bolts可以执行过滤，聚合，加入，与数据源和数据库交互的操作。Bolts接收数据并发射到一个或多个Bolts。 “IBolt”是实现Bolts的核心接口。一些常见的接口是IRichBolt，IBasicBolt等。 |\n\n### 拓扑\n\nSpouts和Bolts连接在一起，形成拓扑结构。实时应用程序逻辑在Storm拓扑中指定。简单地说，拓扑是有向图，其中顶点是计算，边缘是数据流。\n\n简单拓扑从spouts开始。Spouts将数据发射到一个或多个Bolts。Bolt表示拓扑中具有最小处理逻辑的节点，并且Bolts的输出可以发射到另一个Bolts作为输入。\n\nStorm保持拓扑始终运行，直到您终止拓扑。Apache Storm的主要工作是运行拓扑，并在给定时间运行任意数量的拓扑。\n\n### 任务\n\n现在你有一个关于Spouts和Bolts的基本想法。它们是拓扑的最小逻辑单元，并且使用单个Spout和Bolt阵列构建拓扑。应以特定顺序正确执行它们，以使拓扑成功运行。Storm执行的每个Spout和Bolt称为“任务”。简单来说，任务是Spouts或Bolts的执行。在给定时间，每个Spout和Bolt可以具有在多个单独的螺纹中运行的多个实例。\n\n### 进程\n\n拓扑在多个工作节点上以分布式方式运行。Storm将所有工作节点上的任务均匀分布。工作节点的角色是监听作业，并在新作业到达时启动或停止进程。\n\n### 流分组\n\n数据流从Spouts流到Bolts，或从一个Bolts流到另一个Bolts。流分组控制元组在拓扑中的路由方式，并帮助我们了解拓扑中的元组流。有四个内置分组，如下所述。\n\n#### 随机分组\n\n在随机分组中，相等数量的元组随机分布在执行Bolts的所有工人中。下图描述了结构。\n\n![随机分组](https://www.w3cschool.cn/attachments/tuploads/apache_storm/shuffle_grouping.jpg)\n\n#### 字段分组\n\n元组中具有相同值的字段组合在一起，其余的元组保存在外部。然后，具有相同字段值的元组被向前发送到执行Bolts的同一进程。例如，如果流由字段“字”分组，则具有相同字符串“Hello”的元组将移动到相同的工作者。下图显示了字段分组的工作原理。\n\n![现场分组](https://www.w3cschool.cn/attachments/tuploads/apache_storm/field_grouping.jpg)\n\n#### 全局分组\n\n所有流可以分组并向前到一个Bolts。此分组将源的所有实例生成的元组发送到单个目标实例（具体来说，选择具有最低ID的工作程序）。\n\n![全球分组](https://www.w3cschool.cn/attachments/tuploads/apache_storm/global_grouping.jpg)\n\n#### 所有分组\n\n所有分组将每个元组的单个副本发送到接收Bolts的所有实例。这种分组用于向Bolts发送信号。所有分组对于连接操作都很有用。\n\n![所有分组](https://www.w3cschool.cn/attachments/tuploads/apache_storm/all_grouping.jpg)\n\n# 3. Apache Storm集群架构\n\nApache Storm的主要亮点是，它是一个容错，快速，没有“单点故障”（SPOF）分布式应用程序。我们可以根据需要在多个系统中安装Apache Storm，以增加应用程序的容量。\n\n让我们看看Apache Storm集群如何设计和其内部架构。下图描述了集群设计。\n\n![动物园管理员框架](https://www.w3cschool.cn/attachments/tuploads/apache_storm/zookeeper_framework.jpg)\n\nApache Storm有两种类型的节点，Nimbus（主节点）和Supervisor（工作节点）。Nimbus是Apache Storm的核心组件。Nimbus的主要工作是运行Storm拓扑。Nimbus分析拓扑并收集要执行的任务。然后，它将任务分配给可用的supervisor。\n\nSupervisor将有一个或多个工作进程。Supervisor将任务委派给工作进程。工作进程将根据需要产生尽可能多的执行器并运行任务。Apache Storm使用内部分布式消息传递系统来进行Nimbus和管理程序之间的通信。\n\n| 组件                               | 描述                                       |\n| -------------------------------- | ---------------------------------------- |\n| Nimbus（主节点）                      | Nimbus是Storm集群的主节点。集群中的所有其他节点称为工作节点。主节点负责在所有工作节点之间分发数据，向工作节点分配任务和监视故障。 |\n| Supervisor（工作节点）                 | 遵循指令的节点被称为**Supervisors**。Supervisor有多个工作进程，它管理工作进程以完成由nimbus分配的任务。 |\n| Worker process（工作进程）             | 工作进程将执行与特定拓扑相关的任务。工作进程不会自己运行任务，而是创建执行器并要求他们执行特定的任务。工作进程将有多个执行器。 |\n| Executor（执行者）                    | 执行器只是工作进程产生的单个线程。执行器运行一个或多个任务，但仅用于特定的spout或bolt。 |\n| Task（任务）                         | 任务执行实际的数据处理。所以，它是一个spout或bolt。           |\n| ZooKeeper framework（ZooKeeper框架） | Apache的ZooKeeper的是使用群集（节点组）自己和维护具有强大的同步技术共享数据之间进行协调的服务。Nimbus是无状态的，所以它依赖于ZooKeeper来监视工作节点的状态。ZooKeeper的帮助supervisor与nimbus交互。它负责维持nimbus，supervisor的状态。 |\n\n# 4. Apache Storm工作流程\n\n一个工作的Storm集群应该有一个Nimbus和一个或多个supervisors。另一个重要的节点是Apache ZooKeeper，它将用于nimbus和supervisors之间的协调。\n\n现在让我们仔细看看Apache Storm的工作流程 −\n\n- 最初，nimbus将等待“Storm拓扑”提交给它。\n- 一旦提交拓扑，它将处理拓扑并收集要执行的所有任务和任务将被执行的顺序。\n- 然后，nimbus将任务均匀分配给所有可用的supervisors。\n- 在特定的时间间隔，所有supervisor将向nimbus发送心跳以通知它们仍然运行着。\n- 当supervisor终止并且不向心跳发送心跳时，则nimbus将任务分配给另一个supervisor。\n- 当nimbus本身终止时，supervisor将在没有任何问题的情况下对已经分配的任务进行工作。\n- 一旦所有的任务都完成后，supervisor将等待新的任务进去。\n- 同时，终止nimbus将由服务监控工具自动重新启动。\n- 重新启动的网络将从停止的地方继续。同样，终止supervisor也可以自动重新启动。由于网络管理程序和supervisor都可以自动重新启动，并且两者将像以前一样继续，因此Storm保证至少处理所有任务一次。\n- 一旦处理了所有拓扑，则网络管理器等待新的拓扑到达，并且类似地，管理器等待新的任务。\n\n默认情况下，Storm集群中有两种模式：\n\n- **本地模式** -此模式用于开发，测试和调试，因为它是查看所有拓扑组件协同工作的最简单方法。在这种模式下，我们可以调整参数，使我们能够看到我们的拓扑如何在不同的Storm配置环境中运行。在本地模式下，storm拓扑在本地机器上在单个JVM中运行。\n- **生产模式** -在这种模式下，我们将拓扑提交到工作Storm集群，该集群由许多进程组成，通常运行在不同的机器上。如在storm的工作流中所讨论的，工作集群将无限地运行，直到它被关闭。\n\n# 5. Apache Storm分布式消息系统\n\nApache Storm处理实时数据，并且输入通常来自消息排队系统。外部分布式消息系统将提供实时计算所需的输入。Spout将从消息系统读取数据，并将其转换为元组并输入到Apache Storm中。有趣的是，Apache Storm在内部使用其自己的分布式消息传递系统，用于其nimbus和主管之间的通信。\n\n### 什么是分布式消息系统？\n\n分布式消息传递基于可靠消息队列的概念。消息在客户端应用程序和消息系统之间异步排队。分布式消息传递系统提供可靠性，可扩展性和持久性的好处。\n\n大多数消息模式遵循**发布 - 订阅模型**（简称**发布 - 订阅**）,一旦消息已经被发送者发布，订阅者可以在过滤选项的帮助下接收所选择的消息。通常我们有两种类型的过滤，一种是**基于主题的过滤**，另一种是**基于内容的过滤**。\n\npub-sub模型只能通过消息进行通信。它是一个非常松散耦合的架构\n\n![消息系统](https://www.w3cschool.cn/attachments/tuploads/apache_storm/messaging_system.jpg)\n\n| 分布式消息系统                   | 描述                                       |\n| ------------------------- | ---------------------------------------- |\n| Apache Kafka              | Kafka是在LinkedIn公司开发的，后来它成为Apache的一个子项目。 Apache Kafka基于brokerenabled的，持久的，分布式的发布订阅模型。 Kafka是快速，可扩展和高效的。 |\n| RabbitMQ                  | RabbitMQ是一个开源的分布式鲁棒消息应用程序。它易于使用并在所有平台上运行。 |\n| JMS(Java Message Service) | JMS是一个开源API，支持创建，读取和从一个应用程序向另一个应用程序发送消息。它提供有保证的消息传递并遵循发布 - 订阅模型。 |\n| ActiveMQ                  | ActiveMQ消息系统是JMS的开源API。                  |\n| ZeroMQ                    | ZeroMQ是无代理的对等体消息处理。它提供推拉，路由器 - 经销商消息模式。  |\n| Kestrel                   | Kestrel是一个快速，可靠，简单的分布式消息队列。              |\n\n### Thrift协议\n\nThrift在Facebook上构建，用于跨语言服务开发和远程过程调用（RPC）。Apache Thrift是一种**接口定义语言**，允许以容易的方式在定义的数据类型之上定义新的数据类型和服务实现。Storm广泛使用Thrift协议进行内部通信和数据定义。Storm拓扑只是**Thrift Structs**。在Apache Storm中运行拓扑的Storm Nimbus是一个**Thrift服务**。\n\n\n\n\n\n",[[1521136644589,["wanghuan@DESKTOP-VT81TGT",[[1,6,"---\ntitle: HIVE介绍\ndate: 2018/3/15 20:46:25\ncategory:\n- 大数据\n- HIVE\ntag:\n- HIVE\ncomments: true  \n---"]],[6,6],[104,104]]],[1521136646770,["wanghuan@DESKTOP-VT81TGT",[[-1,0,"[TOC]"]],[0,5],[0,0]]],[1521136648631,["wanghuan@DESKTOP-VT81TGT",[[-1,0,"\n"]],[1,1],[0,0]]],[1521136651805,["wanghuan@DESKTOP-VT81TGT",[[-1,11,"HIVE"],[1,15," "]],[11,15],[11,12]]],[1521136653508,["wanghuan@DESKTOP-VT81TGT",[[-1,11," "],[1,12,"storm"]],[11,12],[16,16]]],[1521136657295,["wanghuan@DESKTOP-VT81TGT",[[-1,62,"HIVE"],[1,66,"storm"]],[62,66],[67,67]]],[1521136657840,["wanghuan@DESKTOP-VT81TGT",[[-1,75,"HIVE"],[1,79,"storm"]],[75,79],[80,80]]]]]]}