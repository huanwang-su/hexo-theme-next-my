{"compress":true,"commitItems":[["2efddeae-c9d2-44ca-a35e-c413233691f0",1521136051633,"[TOC]\n\n# 1 MapReduce原理\n\nMapreduce是一个分布式运算程序的编程框架，是用户开发“基于hadoop的数据分析应用”的核心框架；\nMapreduce核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个hadoop集群上；\n\n## 1.1 为什么要MAPREDUCE\n\n1. 海量数据在单机上处理因为硬件资源限制，无法胜任\n2. 而一旦将单机版程序扩展到集群来分布式运行，将极大增加程序的复杂度和开发难度\n3. 引入mapreduce框架后，开发人员可以将绝大部分工作集中在业务逻辑的开发上，而将分布式计算中的复杂性交由框架来处理\n\n>单机版：内存受限，磁盘受限，运算能力受限\n>\n>分布式：\n>\n>1. 文件分布式存储（HDFS）\n>2. 运算逻辑需要至少分成2个阶段（一个阶段独立并发，一个阶段汇聚）\n>3. 运算程序如何分发\n>4. 程序如何分配运算任务（切片）\n>5. 两阶段的程序如何启动？如何协调？\n>\n>整个程序运行过程中的监控？容错？重试？\n>\n>mapreduce就是这样一个分布式程序的通用框架，其应对以上问题的整体结构如下：\n>\n>`1. MRAppMaster(mapreduceapplication master)\n>\n>2. MapTask\n>3. ReduceTask\n\n## 1.2 MAPREDUCE框架结构及核心运行机制\n\n### 1.2.1 结构\n\n一个完整的mapreduce程序在分布式运行时有三类实例进程：\n\n1. MRAppMaster：负责整个程序的过程调度及状态协调\n2. mapTask：负责map阶段的整个数据处理流程\n3. ReduceTask：负责reduce阶段的整个数据处理流程\n\n### 1.2.2 MR程序运行流程\n\n#### 1.2.2.1 流程示意图\n\n![](http://ww1.sinaimg.cn/large/0063bT3gly1fmcpo8i081j30xy0kmq42.jpg)\n\n1.  一个mr程序启动的时候，最先启动的是MRAppMaster，MRAppMaster启动后根据本次job的描述信息，计算出需要的maptask实例数量，然后向集群申请机器启动相应数量的maptask进程\n2. maptask进程启动之后，根据给定的数据切片范围进行数据处理，主体流程为：\n   1. 利用客户指定的inputformat来获取RecordReader读取数据，形成输入KV对\n   2. 将输入KV对传递给客户定义的map()方法，做逻辑运算，并将map()方法输出的KV对收集到缓存\n   3. 将缓存中的KV对按照K分区排序后不断溢写到磁盘文件\n3. MRAppMaster监控到所有maptask进程任务完成之后，会根据客户指定的参数启动相应数量的reducetask进程，并告知reducetask进程要处理的数据范围（数据分区）\n4. Reducetask进程启动之后，根据MRAppMaster告知的待处理数据所在位置，从若干台maptask运行所在机器上获取到若干个maptask输出结果文件，并在本地进行重新归并排序，然后按照相同key的KV为一个组，调用客户定义的reduce()方法进行逻辑运算，并收集运算输出的结果KV，然后调用客户指定的outputformat将结果数据输出到外部存储\n\n## 1.3 MapTask并行度决定机制\n\nmaptask的并行度决定map阶段的任务处理并发度，进而影响到整个job的处理速度那么，mapTask并行实例是否越多越好呢？其并行度又是如何决定呢？\n\n### 1.3.1 mapTask并行度的决定机制\n\n一个job的map阶段并行度由客户端在提交job时决定\n\n而客户端对map阶段并行度的规划的基本逻辑为：\n\n将待处理数据执行逻辑切片（即按照一个特定切片大小，将待处理数据划分成逻辑上的多个split），然后**每一个split分配一个mapTask并行实例处理**\n\n这段逻辑及形成的切片规划描述文件，由FileInputFormat实现类的getSplits()方法完成，其过程如下图：\n\n### ![](http://ww1.sinaimg.cn/large/0063bT3gly1fmcq54zsybj30rq0h00tg.jpg)1.3.2 FileInputFormat切片机制\n\n1. 切片定义在InputFormat类中的getSplit()方法\n\n2. FileInputFormat中默认的切片机制：\n\n   a)\t简单地按照文件的内容长度进行切片\n   b)\t切片大小，默认等于block大小\n   c)\t切片时不考虑数据集整体，而是逐个针对每一个文件单独切片\n\n3. FileInputFormat中切片的大小的参数配置\n\n   在FileInputFormat中，计算切片大小的逻辑：Math.max(minSize, Math.min(maxSize, blockSize));  切片主要由这几个值来运算决定\n\n   | minsize：默认值：1            配置参数： mapreduce.input.fileinputformat.split.minsize |\n   | ---------------------------------------- |\n   | maxsize：默认值：Long.MAXValue         配置参数：mapreduce.input.fileinputformat.split.maxsize |\n   | blocksize                                |\n\n4. 选择并发数的影响因素：\n\n   1. 运算节点的硬件配置\n   2. 运算任务的类型：CPU密集型还是IO密集型\n   3. 运算任务的数据量\n\n## 1.3.3 map并行度的经验之谈\n\n如果硬件配置为2*12core + 64G，恰当的map并行度是大约每个节点20-100个map，最好每个map的执行时间至少一分钟\n\n- 如果job的每个map或者 reduce task的运行时间都只有30-40秒钟，那么就减少该job的map或者reduce数，每一个task(map|reduce)的setup和加入到调度器中进行调度，这个中间的过程可能都要花费几秒钟\n- 如果input的文件非常的大，比如1TB，可以考虑将hdfs上的每个block\n  size设大，比如设成256MB或者512MB\n\n## 1.4 ReduceTask并行度的决定\n\nreducetask的并行度同样影响整个job的执行并发度和执行效率，但与maptask的并发数由切片数决定不同，Reducetask数量的决定是可以直接手动设置：\n\n``` java\n//默认值是1，手动设置为4\njob.setNumReduceTasks(4);\n```\n\n如果数据分布不均匀，就有可能在reduce阶段产生数据倾斜\n\n> 注意： reducetask数量并不是任意设置，还要考虑业务逻辑需求，有些情况下，需要计算全局汇总结果，就只能有1个reducetask\n\n# 2 MapReduce实践\n\n## 2.1 MAPREDUCE示例编写及编程规范\n\n### 2.1.1 编程规范\n\n（1）用户编写的程序分成三个部分：Mapper，Reducer，Driver(提交运行mr程序的客户端)\n\n（2）Mapper的输入数据是KV对的形式（KV的类型可自定义）\n\n（3）Mapper的输出数据是KV对的形式（KV的类型可自定义）\n\n（4）Mapper中的业务逻辑写在map()方法中\n\n（5）map()方法（maptask进程）对每一个<K,V>调用一次\n\n（6）Reducer的输入数据类型对应Mapper的输出数据类型，也是KV\n\n（7）Reducer的业务逻辑写在reduce()方法中\n\n（8）Reducetask进程对每一组相同k的<k,v>组调用一次reduce()方法\n\n（9）用户自定义的Mapper和Reducer都要继承各自的父类\n\n（10）整个程序需要一个Drvier来进行提交，提交的是一个描述了各种必要信息的job对象\n\n### 2.1.2 wordcount示例编写\n\n定义一个mapper类\n\n``` java\n//首先要定义四个泛型的类型\n//keyin:  LongWritable    valuein: Text\n//keyout: Text            valueout:IntWritable\n\npublic class WordCountMapper extends Mapper<LongWritable, Text, Text, IntWritable>{\n\t//map方法的生命周期：  框架每传一行数据就被调用一次\n\t//key :  这一行的起始点在文件中的偏移量\n\t//value: 这一行的内容\n\t@Override\n\tprotected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\t\t//拿到一行数据转换为string\n\t\tString line = value.toString();\n\t\t//将这一行切分出各个单词\n\t\tString[] words = line.split(\" \");\n\t\t//遍历数组，输出<单词，1>\n\t\tfor(String word:words){\n\t\t\tcontext.write(new Text(word), new IntWritable(1));\n\t\t}\n\t}\n}\n```\n\n定义一个reducer类\n\n``` java\npublic class WordCountReduce extends Reduce<Text, IntWritable, Text, IntWritable>{\n//生命周期：框架每传递进来一个kv 组，reduce方法被调用一次\n\t@Override\n\tprotected void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {\n\t\t//定义一个计数器\n\t\tint count = 0;\n\t\t//遍历这一组kv的所有v，累加到count中\n\t\tfor(IntWritable value:values){\n\t\t\tcount += value.get();\n\t\t}\n\t\tcontext.write(key, new IntWritable(count));\n\t}\n}\n```\n\n定义一个主类，用来描述job并提交job\n\n``` java\npublic class WordCountRunner {\n\t//把业务逻辑相关的信息（哪个是mapper，哪个是reducer，要处理的数据在哪里，输出的结果放哪里……）描述成一个job对象\n\t//把这个描述好的job提交给集群去运行\n\tpublic static void main(String[] args) throws Exception {\n\t\tConfiguration conf = new Configuration();\n\t\tJob wcjob = Job.getInstance(conf);\n\t\t//指定我这个job所在的jar包\n//\t\twcjob.setJar(\"/home/hadoop/wordcount.jar\");\n\t\twcjob.setJarByClass(WordCountRunner.class);\n\t\t\n\t\twcjob.setMapperClass(WordCountMapper.class);\n\t\twcjob.setReducerClass(WordCountReducer.class);\n\t\t//设置我们的业务逻辑Mapper类的输出key和value的数据类型\n\t\twcjob.setMapOutputKeyClass(Text.class);\n\t\twcjob.setMapOutputValueClass(IntWritable.class);\n\t\t//设置我们的业务逻辑Reducer类的输出key和value的数据类型\n\t\twcjob.setOutputKeyClass(Text.class);\n\t\twcjob.setOutputValueClass(IntWritable.class);\n\t\t\n\t\t//指定要处理的数据所在的位置\n\t\tFileInputFormat.setInputPaths(wcjob, \"hdfs://hdp-server01:9000/wordcount/data/big.txt\");\n\t\t//指定处理完成之后的结果所保存的位置\n\t\tFileOutputFormat.setOutputPath(wcjob, new Path(\"hdfs://hdp-server01:9000/wordcount/output/\"));\n\t\t\n\t\t//向yarn集群提交这个job\n\t\tboolean res = wcjob.waitForCompletion(true);\n\t\tSystem.exit(res?0:1);\n\t}\n}\n```\n\n\n\n## 2.2 MapReduce程序运行模式\n\n### 2.2.1 本地运行 \n\n1. mapreduce程序是被提交给LocalJobRunner在本地以单进程的形式运行\n2. 而处理的数据及输出结果可以在本地文件系统，也可以在hdfs上\n3. 怎样实现本地运行？写一个程序，不要带集群的配置文件（本质是你的mr程序的conf中是否有mapreduce.framework.name=local以及yarn.resourcemanager.hostname参数）\n4. 本地模式非常便于进行业务逻辑的debug，只要在eclipse中打断点即可\n\n### 2.2.2 集群运行模式\n\n1. 将mapreduce程序提交给yarn集群resourcemanager，分发到很多的节点上并发执行\n\n2. 处理的数据和输出结果应该位于hdfs文件系统\n\n3. 提交集群的实现步骤：\n\n   A. 将程序打成JAR包，然后在集群的任意一个节点上用hadoop命令启动\n\n   ​     $ hadoop jar wordcount.jar cn.itcast.bigdata.mrsimple.WordCountDriverinputpath outputpath\n\n   B. 直接在linux的eclipse中运行main方法（项目中要带参数：mapreduce.framework.name=yarn以及yarn的两个基本配置）\n\n   C. 如果要在windows的eclipse中提交job给集群，则要修改YarnRunner类\n\nmapreduce程序在集群中运行时的大体流程：\n\n![](http://ww1.sinaimg.cn/large/0063bT3gly1fmczkzxrd3j30yq0erq3n.jpg)\n\n2.3 MapReduce中的Combiner\n\n- combiner是MR程序中Mapper和Reducer之外的一种组件\n\n- combiner组件的父类就是Reducer\n\n- combiner和reducer的区别在于运行的位置：\n\n  - Combiner是在每一个maptask所在的节点运行\n\n\n  - Reducer是接收全局所有Mapper的输出结果；\n\n- combiner的意义就是对每一个maptask的输出进行局部汇总，以减小网络传输量\n\n  具体实现步骤：\n\n  1. 自定义一个combiner继承Reducer，重写reduce方法\n  2. 在job中设置：  job.setCombinerClass(CustomCombiner.class)\n\n(5) combiner能够应用的前提是不能影响最终的业务逻辑而且，combiner的输出kv应该跟reducer的输入kv类型要对应起来\n\n# 3 shuffle机制\n\n## 3.1 概述\n\n- mapreduce中，map阶段处理的数据如何传递给reduce阶段，是mapreduce框架中最关键的一个流程，这个流程就叫shuffle；\n- shuffle: 洗牌. 发牌——（核心机制：数据分区，排序，缓存）；\n- 具体来说：就是将maptask输出的处理结果数据，分发给reducetask，并在分发的过程中，对数据按key进行了分区和排序；\n\n## 3.2 主要流程\n\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmd1vvgzfbj30t90f3wmp.jpg)\n\nshuffle是MR处理流程中的一个过程，它的每一个处理步骤是分散在各个map task和reduce task节点上完成的，整体来看，分为3个操作：\n\n1. 分区partition\n2. Sort根据key排序\n3. Combiner进行局部value的合并\n\n## 3.3 详细流程\n\n1.  maptask收集我们的map()方法输出的kv对，放到内存缓冲区中\n2.  从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件\n3. 多个溢出文件会被合并成大的溢出文件\n4.  在溢出过程中，及合并的过程中，都要调用partitoner进行分组和针对key进行排序\n5. reducetask根据自己的分区号，去各个maptask机器上取相应的结果分区数据\n6.  reducetask会取到同一个分区的来自不同maptask的结果文件，reducetask会将这些文件再进行合并（归并排序）\n7. 合并成大文件后，shuffle的过程也就结束了，后面进入reducetask的逻辑运算过程（从文件中取出一个一个的键值对group，调用用户自定义的reduce()方法）\n\nShuffle中的缓冲区大小会影响到mapreduce程序的执行效率，原则上说，缓冲区越大，磁盘io的次数越少，执行速度就越快 缓冲区的大小可以通过参数调整,  参数：io.sort.mb  默认100M\n\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmd20rdgfej31d01fgdk0.jpg)\n\n# 4 MAPREDUCE中的序列化\n\n## 4.1 概述\n\nJava的序列化是一个重量级序列化框架（Serializable），一个对象被序列化后，会附带很多额外的信息（各种校验信息header，继承体系。。。。），不便于在网络中高效传输；所以hadoop自己开发了一套序列化机制（Writable），精简，高效\n\n## 4.2 Jdk序列化和MR序列化之间的比较\n\n一个是readObject和writeObject\n\n一个是自定义流的解析\n\n## 4.3 自定义对象实现MR中的序列化接口\n\n如果需要将自定义的bean放在key中传输，则还需要实现comparable接口，因为mapreduce框中的shuffle过程一定会对key进行排序,此时，自定义的bean实现的接口应该是：\n\n`public class  FlowBean  implements  WritableComparable<FlowBean> `\n\n需要自己实现的方法是：\n\n``` java\n\t/**\n\t * 反序列化的方法，反序列化时，从流中读取到的各个字段的顺序应该与序列化时写出去的顺序保持一致\n\t */\n\t@Override\n\tpublic void readFields(DataInput in) throws IOException {\t\n\t\tupflow = in.readLong();\n\t\tdflow = in.readLong();\n\t\tsumflow = in.readLong();\t\n\t}\n\n\t/**\n\t * 序列化的方法\n\t */\n\t@Override\n\tpublic void write(DataOutput out) throws IOException {\n\t\tout.writeLong(upflow);\n\t\tout.writeLong(dflow);\n\t\t//可以考虑不序列化总流量，因为总流量是可以通过上行流量和下行流量计算出来的\n\t\tout.writeLong(sumflow);\n\t}\n\t\n\t@Override\n\tpublic int compareTo(FlowBean o) {\n\t\t//实现按照sumflow的大小倒序排序\n\t\treturn sumflow>o.getSumflow()?-1:1;\n\t}\n```\n\n# 5 MapReduce与YARN\n\n## 5.1 YARN概述\n\nYarn是一个资源调度平台，负责为运算程序提供服务器运算源，相当于一个分布式的操作系统平台，而mapreduce等运算程序则相当于运行于操作系统之上的应用程序\n\n1.  yarn并不清楚用户提交的程序的运行机制\n2.  yarn只提供运算资源的调度（用户程序向yarn申请资源，yarn就负责分配资源）\n3.  yarn中的主管角色叫ResourceManager\n4.  yarn中具体提供运算资源的角色叫NodeManager\n5.  这样一来，yarn其实就与运行的用户程序完全解耦，就意味着yarn上可以运行各种类型的分布式运算程序（mapreduce只是其中的一种），比如mapreduce. storm程序，spark程序，tez ……\n6.  所以，spark. storm等运算框架都可以整合在yarn上运行，只要他们各自的框架中有符合yarn规范的资源请求机制即可\n7.  Yarn就成为一个通用的资源调度平台，从此，企业中以前存在的各种运算集群都可以整合在一个物理集群上，提高资源利用率，方便数据共享\n\n## 5.2 Yarn中运行运算程序的示例\n\nmapreduce程序的调度过程，如下图\n\n![](http://ww1.sinaimg.cn/large/0063bT3ggy1fmd2bzrq39j31200i8gnf.jpg)\n\n# 6 Mapreduce中的分区Partitioner\n\nMapreduce中会将map输出的kv对，按照相同key分组，然后分发给不同的reducetask\n\n默认的分发规则为：根据key的hashcode%reducetask数来分发\n\n所以：如果要按照我们自己的需求进行分组，则需要改写数据分发（分组）组件Partitioner\n\n自定义一个CustomPartitioner继承抽象类：Partitioner然后在job对象中，设置自定义partitioner：\n\n` job.setPartitionerClass(CustomPartitioner.class)`\n\n",[[1521136043772,["wanghuan@DESKTOP-VT81TGT",[[-1,0,"[TOC]"],[1,5,"---\ntitle: HDFS介绍\ndate: 2018/3/15 20:46:25\ncategory:\n- 大数据\n- hdfs\ntag:\n- hdfs\ncomments: true  \n---"]],[5,5],[98,98]]],[1521136047132,["wanghuan@DESKTOP-VT81TGT",[[-1,61,"hdfs"],[1,65,"MapReduce"]],[61,65],[70,70]]],[1521136048827,["wanghuan@DESKTOP-VT81TGT",[[-1,11,"HDFS"],[1,15,"MapReduce"]],[11,15],[20,20]]],[1521136051122,["wanghuan@DESKTOP-VT81TGT",[[-1,83,"hdfs"],[1,87,"MapReduce"]],[83,87],[92,92]]]]]]}